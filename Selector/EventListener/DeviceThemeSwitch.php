<?php/* * This file is part of the JungiThemeBundle package. * * (c) Piotr Kugla <piku235@gmail.com> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */namespace Jungi\Bundle\ThemeBundle\Selector\EventListener;use Jungi\Bundle\ThemeBundle\Selector\ThemeSelectorEvents;use Jungi\Bundle\ThemeBundle\Tag;use Jungi\Bundle\ThemeBundle\Selector\Event\ResolvedThemeEvent;use Jungi\Bundle\ThemeBundle\Core\MobileDetect;use Symfony\Component\EventDispatcher\EventSubscriberInterface;/** * The class is designed for matching themes for an appropriate device * that invoked the request * * @author Piotr Kugla <piku235@gmail.com> */class DeviceThemeSwitch implements EventSubscriberInterface{    /**     * @var MobileDetect     */    private $detect;    /**     * Constructor     *     * @param MobileDetect $mobileDetect A mobile detect instance     */    public function __construct(MobileDetect $mobileDetect)    {        $this->detect = $mobileDetect;    }    /**     * Handles the ResolvedThemeEvent event     *     * @param ResolvedThemeEvent $event An event     *     * @return void     */    public function onResolvedTheme(ResolvedThemeEvent $event)    {        // A theme from the event        $theme = $event->getTheme();        // Only the representative themes will be handled        // so the themes which does not have a link tag        // will be omitted        if ($theme->getTags()->has(Tag\Link::getName())) {            return;        }        // Handle a request from the event        $this->detect->handleRequest($event->getRequest());        // If none of devices had not match, stop        if ($this->detect->isMobile()) { // Is a mobile or tablet device?            $tag = new Tag\MobileDevices(                $this->detect->detectOS(),                $this->detect->isTablet() ? Tag\MobileDevices::TABLET : Tag\MobileDevices::MOBILE            );        } else {            $tag = new Tag\DesktopDevices();        }        // Do nothing if a obtained theme has this tag        if ($theme->getTags()->contains($tag)) {            return;        }        // Look for a substitute theme        $substituteTheme = $event->getThemeManager()->getThemeWithTags(array(            new Tag\Link($theme->getName()),            $tag        ));        // Sets a new theme if found        if (null !== $substituteTheme) {            $event->setTheme($substituteTheme);        }    }    /**     * (non-PHPdoc)     * @see \Symfony\Component\EventDispatcher\EventSubscriberInterface::getSubscribedEvents()     */    public static function getSubscribedEvents()    {        return array(            ThemeSelectorEvents::RESOLVED_THEME => array('onResolvedTheme')        );    }}